name: Build and Push to ECR

on:
  push:
    branches:
      - main

jobs:
  typecheck-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install pipenv and dependencies
      working-directory: ./src/app
      run: |
        pip install pipenv
        pipenv install

    - name: Run Type Checking with mypy
      working-directory: ./src/app
      run: pipenv run mypy .

    - name: Run Pytest
      working-directory: ./src/app/test
      run: pipenv run pytest

  
  build-and-push:
    needs: typecheck-and-test
    runs-on: ubuntu-latest
    env:
      AWS_DEFAULT_REGION: us-west-2

    steps:
    - name: Check out code
      uses: actions/checkout@v3
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install

    - name: Store secrets in SSM param store
      run: |
        aws ssm put-parameter --name "OPENAI_API_KEY" --type "SecureString" --value "${{ secrets.OPENAI_API_KEY }}" --overwrite
        aws ssm put-parameter --name "VLLM_API_KEY" --type "SecureString" --value "${{ secrets.VLLM_API_KEY }}" --overwrite
        aws ssm put-parameter --name "BOT_TOKEN" --type "SecureString" --value "${{ secrets.BOT_TOKEN }}" --overwrite
        aws ssm put-parameter --name "RATE_LIMITS" --type "SecureString" --value "${{ secrets.RATE_LIMITS }}" --overwrite

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPO_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx build --platform linux/arm64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f ./src/Dockerfile ./src --push

    - name: Force New Deployment
      run: |
        aws ecs update-service --cluster main-cluster --service main-service --force-new-deployment
